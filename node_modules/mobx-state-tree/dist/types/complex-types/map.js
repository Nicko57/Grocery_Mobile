import * as tslib_1 from "tslib";
import { ObservableMap, action, intercept, observe, values, observable, _interceptReads } from "mobx";
import { getStateTreeNode, escapeJsonPath, createNode, isStateTreeNode, ComplexType, TypeFlags, typeCheckFailure, flattenTypeErrors, getContextForPath, typecheck, fail, isMutable, isPlainObject, isType, ObjectNode, ModelType, OptionalValue, Union, Late } from "../../internal";
var needsIdentifierError = "Map.put can only be used to store complex values that have an identifier type attribute";
function tryCollectModelTypes(type, modelTypes) {
    if (type instanceof ModelType) {
        modelTypes.push(type);
    }
    else if (type instanceof OptionalValue) {
        if (!tryCollectModelTypes(type.type, modelTypes))
            return false;
    }
    else if (type instanceof Union) {
        for (var i = 0; i < type.types.length; i++) {
            var uType = type.types[i];
            if (!tryCollectModelTypes(uType, modelTypes))
                return false;
        }
    }
    else if (type instanceof Late) {
        var t = type.getSubType(false);
        if (!t)
            return false;
        tryCollectModelTypes(t, modelTypes);
    }
    return true;
}
export var MapIdentifierMode;
(function (MapIdentifierMode) {
    MapIdentifierMode[MapIdentifierMode["UNKNOWN"] = 0] = "UNKNOWN";
    MapIdentifierMode[MapIdentifierMode["YES"] = 1] = "YES";
    MapIdentifierMode[MapIdentifierMode["NO"] = 2] = "NO";
})(MapIdentifierMode || (MapIdentifierMode = {}));
var MSTMap = /** @class */ (function (_super) {
    tslib_1.__extends(MSTMap, _super);
    function MSTMap(initialData) {
        return _super.call(this, initialData, observable.ref.enhancer) || this;
    }
    MSTMap.prototype.get = function (key) {
        // maybe this is over-enthousiastic? normalize numeric keys to strings
        return _super.prototype.get.call(this, "" + key);
    };
    MSTMap.prototype.has = function (key) {
        return _super.prototype.has.call(this, "" + key);
    };
    MSTMap.prototype.delete = function (key) {
        return _super.prototype.delete.call(this, "" + key);
    };
    MSTMap.prototype.set = function (key, value) {
        return _super.prototype.set.call(this, "" + key, value);
    };
    MSTMap.prototype.put = function (value) {
        if (!!!value)
            fail("Map.put cannot be used to set empty values");
        if (isStateTreeNode(value)) {
            var node = getStateTreeNode(value);
            if (process.env.NODE_ENV !== "production") {
                if (!node.identifierAttribute)
                    return fail(needsIdentifierError);
            }
            var key = node.identifier;
            this.set(key, node.value);
            return node.value;
        }
        else if (!isMutable(value)) {
            return fail("Map.put can only be used to store complex values");
        }
        else {
            var key = void 0;
            var mapType = getStateTreeNode(this).type;
            if (mapType.identifierMode === MapIdentifierMode.NO)
                return fail(needsIdentifierError);
            if (mapType.identifierMode === MapIdentifierMode.YES) {
                key = "" + value[mapType.identifierAttribute];
                this.set(key, value);
                return this.get(key);
            }
            return fail(needsIdentifierError);
        }
    };
    return MSTMap;
}(ObservableMap));
var MapType = /** @class */ (function (_super) {
    tslib_1.__extends(MapType, _super);
    function MapType(name, subType) {
        var _this = _super.call(this, name) || this;
        _this.shouldAttachNode = true;
        _this.identifierMode = MapIdentifierMode.UNKNOWN;
        _this.identifierAttribute = undefined;
        _this.flags = TypeFlags.Map;
        _this.subType = subType;
        _this._determineIdentifierMode();
        return _this;
    }
    MapType.prototype.instantiate = function (parent, subpath, environment, snapshot) {
        if (this.identifierMode === MapIdentifierMode.UNKNOWN) {
            this._determineIdentifierMode();
        }
        return createNode(this, parent, subpath, environment, snapshot, this.createNewInstance, this.finalizeNewInstance);
    };
    MapType.prototype._determineIdentifierMode = function () {
        var modelTypes = [];
        if (tryCollectModelTypes(this.subType, modelTypes)) {
            var identifierAttribute_1 = undefined;
            modelTypes.forEach(function (type) {
                if (type.identifierAttribute) {
                    if (identifierAttribute_1 && identifierAttribute_1 !== type.identifierAttribute) {
                        fail("The objects in a map should all have the same identifier attribute, expected '" + identifierAttribute_1 + "', but child of type '" + type.name + "' declared attribute '" + type.identifierAttribute + "' as identifier");
                    }
                    identifierAttribute_1 = type.identifierAttribute;
                }
            });
            if (identifierAttribute_1) {
                this.identifierMode = MapIdentifierMode.YES;
                this.identifierAttribute = identifierAttribute_1;
            }
            else {
                this.identifierMode = MapIdentifierMode.NO;
            }
        }
    };
    MapType.prototype.initializeChildNodes = function (objNode, initialSnapshot) {
        if (initialSnapshot === void 0) { initialSnapshot = {}; }
        var subType = objNode.type.subType;
        var environment = objNode._environment;
        var result = {};
        Object.keys(initialSnapshot).forEach(function (name) {
            result[name] = subType.instantiate(objNode, name, environment, initialSnapshot[name]);
        });
        return result;
    };
    MapType.prototype.describe = function () {
        return "Map<string, " + this.subType.describe() + ">";
    };
    MapType.prototype.createNewInstance = function (childNodes) {
        return new MSTMap(childNodes);
    };
    MapType.prototype.finalizeNewInstance = function (node) {
        var objNode = node;
        var type = objNode.type;
        var instance = objNode.storedValue;
        _interceptReads(instance, objNode.unbox);
        intercept(instance, type.willChange);
        observe(instance, type.didChange);
    };
    MapType.prototype.getChildren = function (node) {
        // return (node.storedValue as ObservableMap<any>).values()
        return values(node.storedValue);
    };
    MapType.prototype.getChildNode = function (node, key) {
        var childNode = node.storedValue.get("" + key);
        if (!childNode)
            fail("Not a child " + key);
        return childNode;
    };
    MapType.prototype.willChange = function (change) {
        var node = getStateTreeNode(change.object);
        var key = change.name;
        node.assertWritable();
        var mapType = node.type;
        var subType = mapType.subType;
        switch (change.type) {
            case "update":
                {
                    var newValue = change.newValue;
                    var oldValue = change.object.get(key);
                    if (newValue === oldValue)
                        return null;
                    typecheck(subType, newValue);
                    change.newValue = subType.reconcile(node.getChildNode(key), change.newValue);
                    mapType.processIdentifier(key, change.newValue);
                }
                break;
            case "add":
                {
                    typecheck(subType, change.newValue);
                    change.newValue = subType.instantiate(node, key, undefined, change.newValue);
                    mapType.processIdentifier(key, change.newValue);
                }
                break;
        }
        return change;
    };
    MapType.prototype.processIdentifier = function (expected, node) {
        if (this.identifierMode === MapIdentifierMode.YES && node instanceof ObjectNode) {
            var identifier = node.identifier;
            if (identifier !== expected)
                fail("A map of objects containing an identifier should always store the object under their own identifier. Trying to store key '" + identifier + "', but expected: '" + expected + "'");
        }
    };
    MapType.prototype.getValue = function (node) {
        return node.storedValue;
    };
    MapType.prototype.getSnapshot = function (node) {
        var res = {};
        node.getChildren().forEach(function (childNode) {
            res[childNode.subpath] = childNode.snapshot;
        });
        return res;
    };
    MapType.prototype.processInitialSnapshot = function (childNodes, snapshot) {
        var processed = {};
        Object.keys(childNodes).forEach(function (key) {
            processed[key] = childNodes[key].getSnapshot();
        });
        return processed;
    };
    MapType.prototype.didChange = function (change) {
        var node = getStateTreeNode(change.object);
        switch (change.type) {
            case "update":
                return void node.emitPatch({
                    op: "replace",
                    path: escapeJsonPath(change.name),
                    value: change.newValue.snapshot,
                    oldValue: change.oldValue ? change.oldValue.snapshot : undefined
                }, node);
            case "add":
                return void node.emitPatch({
                    op: "add",
                    path: escapeJsonPath(change.name),
                    value: change.newValue.snapshot,
                    oldValue: undefined
                }, node);
            case "delete":
                // a node got deleted, get the old snapshot and make the node die
                var oldSnapshot = change.oldValue.snapshot;
                change.oldValue.die();
                // emit the patch
                return void node.emitPatch({ op: "remove", path: escapeJsonPath(change.name), oldValue: oldSnapshot }, node);
        }
    };
    MapType.prototype.applyPatchLocally = function (node, subpath, patch) {
        var target = node.storedValue;
        switch (patch.op) {
            case "add":
            case "replace":
                target.set(subpath, patch.value);
                break;
            case "remove":
                target.delete(subpath);
                break;
        }
    };
    MapType.prototype.applySnapshot = function (node, snapshot) {
        typecheck(this, snapshot);
        var target = node.storedValue;
        var currentKeys = {};
        Array.from(target.keys()).forEach(function (key) {
            currentKeys[key] = false;
        });
        // Don't use target.replace, as it will throw all existing items first
        for (var key in snapshot) {
            target.set(key, snapshot[key]);
            currentKeys["" + key] = true;
        }
        Object.keys(currentKeys).forEach(function (key) {
            if (currentKeys[key] === false)
                target.delete(key);
        });
    };
    MapType.prototype.getChildType = function (key) {
        return this.subType;
    };
    MapType.prototype.isValidSnapshot = function (value, context) {
        var _this = this;
        if (!isPlainObject(value)) {
            return typeCheckFailure(context, value, "Value is not a plain object");
        }
        return flattenTypeErrors(Object.keys(value).map(function (path) {
            return _this.subType.validate(value[path], getContextForPath(context, path, _this.subType));
        }));
    };
    MapType.prototype.getDefaultSnapshot = function () {
        return {};
    };
    MapType.prototype.removeChild = function (node, subpath) {
        ;
        node.storedValue.delete(subpath);
    };
    tslib_1.__decorate([
        action
    ], MapType.prototype, "applySnapshot", null);
    return MapType;
}(ComplexType));
export { MapType };
/**
 * Creates a key based collection type who's children are all of a uniform declared type.
 * If the type stored in a map has an identifier, it is mandatory to store the child under that identifier in the map.
 *
 * This type will always produce [observable maps](https://mobx.js.org/refguide/map.html)
 *
 * @example
 * const Todo = types.model({
 *   id: types.identifier,
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.map(Todo)
 * })
 *
 * const s = TodoStore.create({ todos: {} })
 * unprotect(s)
 * s.todos.set(17, { task: "Grab coffee", id: 17 })
 * s.todos.put({ task: "Grab cookie", id: 18 }) // put will infer key from the identifier
 * console.log(s.todos.get(17).task) // prints: "Grab coffee"
 *
 * @export
 * @alias types.map
 * @param {IType<S, T>} subtype
 * @returns {IComplexType<S[], IObservableArray<T>>}
 */
export function map(subtype) {
    var ret = new MapType("map<string, " + subtype.name + ">", subtype);
    return ret;
}
export function isMapType(type) {
    return isType(type) && (type.flags & TypeFlags.Map) > 0;
}
//# sourceMappingURL=map.js.map