import { union, optional, isType, fail, undefinedType, nullType } from "../../internal";
var optionalUndefinedType = optional(undefinedType, undefined);
var optionalNullType = optional(nullType, null);
/**
 * Maybe will make a type nullable, and also optional.
 * The value `undefined` will be used to represent nullability.
 *
 * @export
 * @alias types.maybe
 * @template C
 * @template S
 * @template T
 * @param {IType<C, S, M>} type The type to make nullable
 * @returns {(IType<C | undefined, S | undefined, T | undefined>)}
 */
export function maybe(type) {
    if (process.env.NODE_ENV !== "production" && !isType(type))
        fail("expected a mobx-state-tree type as first argument, got " + type + " instead");
    return union(type, optionalUndefinedType);
}
/**
 * Maybe will make a type nullable, and also optional.
 * The value `null` will be used to represent no value.
 *
 * @export
 * @alias types.maybeNull
 * @template C
 * @template S
 * @template T
 * @param {IType<C, S, M>} type The type to make nullable
 * @returns {(IType<C | null | undefined, S | null, T | null>)}
 */
export function maybeNull(type) {
    if (process.env.NODE_ENV !== "production" && !isType(type))
        fail("expected a mobx-state-tree type as first argument, got " + type + " instead");
    return union(type, optionalNullType);
}
//# sourceMappingURL=maybe.js.map