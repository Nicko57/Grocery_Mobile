import { escapeJsonPath, fail, freeze, NodeLifeCycle, noop } from "../../internal";
var ScalarNode = /** @class */ (function () {
    function ScalarNode(type, parent, subpath, environment, initialSnapshot, createNewInstance, finalizeNewInstance) {
        if (finalizeNewInstance === void 0) { finalizeNewInstance = noop; }
        this.subpath = "";
        this.state = NodeLifeCycle.INITIALIZING;
        this._environment = undefined;
        this._initialSnapshot = initialSnapshot;
        this.type = type;
        this.parent = parent;
        this.subpath = subpath;
        this.storedValue = createNewInstance(initialSnapshot);
        var sawException = true;
        try {
            finalizeNewInstance(this, initialSnapshot);
            this.state = NodeLifeCycle.CREATED;
            sawException = false;
        }
        finally {
            if (sawException) {
                // short-cut to die the instance, to avoid the snapshot computed starting to throw...
                this.state = NodeLifeCycle.DEAD;
            }
        }
    }
    Object.defineProperty(ScalarNode.prototype, "path", {
        /*
         * Returnes (escaped) path representation as string
         */
        get: function () {
            if (!this.parent)
                return "";
            return this.parent.path + "/" + escapeJsonPath(this.subpath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScalarNode.prototype, "isRoot", {
        get: function () {
            return this.parent === null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScalarNode.prototype, "root", {
        get: function () {
            // future optimization: store root ref in the node and maintain it
            if (!this.parent)
                return fail("This scalar node is not part of a tree");
            return this.parent.root;
        },
        enumerable: true,
        configurable: true
    });
    ScalarNode.prototype.setParent = function (newParent, subpath) {
        if (subpath === void 0) { subpath = null; }
        if (this.parent === newParent && this.subpath === subpath)
            return;
        fail("setParent is not supposed to be called on scalar nodes");
    };
    Object.defineProperty(ScalarNode.prototype, "value", {
        get: function () {
            return this.type.getValue(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScalarNode.prototype, "snapshot", {
        get: function () {
            var snapshot = this.getSnapshot();
            // avoid any external modification in dev mode
            return freeze(snapshot);
        },
        enumerable: true,
        configurable: true
    });
    ScalarNode.prototype.getSnapshot = function () {
        return this.type.getSnapshot(this);
    };
    Object.defineProperty(ScalarNode.prototype, "isAlive", {
        get: function () {
            return this.state !== NodeLifeCycle.DEAD;
        },
        enumerable: true,
        configurable: true
    });
    ScalarNode.prototype.toString = function () {
        return this.type.name + "@" + (this.path || "<root>") + (this.isAlive ? "" : "[dead]");
    };
    ScalarNode.prototype.die = function () {
        this.state = NodeLifeCycle.DEAD;
    };
    return ScalarNode;
}());
export { ScalarNode };
//# sourceMappingURL=scalar-node.js.map