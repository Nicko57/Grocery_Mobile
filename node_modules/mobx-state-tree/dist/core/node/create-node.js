import { isStateTreeNode, identity, noop, fail, ObjectNode, ScalarNode } from "../../internal";
// TODO: split into object and scalar node?
export function createNode(type, parent, subpath, environment, initialValue, createNewInstance, finalizeNewInstance) {
    if (createNewInstance === void 0) { createNewInstance = identity; }
    if (finalizeNewInstance === void 0) { finalizeNewInstance = noop; }
    if (isStateTreeNode(initialValue)) {
        var targetNode = initialValue.$treenode;
        if (!targetNode.isRoot)
            fail("Cannot add an object to a state tree if it is already part of the same or another state tree. Tried to assign an object to '" + (parent ? parent.path : "") + "/" + subpath + "', but it lives already at '" + targetNode.path + "'");
        targetNode.setParent(parent, subpath);
        return targetNode;
    }
    if (type.shouldAttachNode) {
        return new ObjectNode(type, parent, subpath, environment, initialValue, createNewInstance, finalizeNewInstance);
    }
    return new ScalarNode(type, parent, subpath, environment, initialValue, createNewInstance, finalizeNewInstance);
}
export function isNode(value) {
    return value instanceof ScalarNode || value instanceof ObjectNode;
}
//# sourceMappingURL=create-node.js.map