import * as tslib_1 from "tslib";
import { isObservableArray, $mobx, getAtom } from "mobx";
export var EMPTY_ARRAY = Object.freeze([]);
export var EMPTY_OBJECT = Object.freeze({});
export var mobxShallow = typeof $mobx === "string" ? { deep: false } : { deep: false, proxy: false };
Object.freeze(mobxShallow);
export function fail(message) {
    if (message === void 0) { message = "Illegal state"; }
    throw new Error("[mobx-state-tree] " + message);
}
export function identity(_) {
    return _;
}
export function nothing() {
    return null;
}
export function noop() { }
// pollyfill (for IE) suggested in MDN:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
export var isInteger = Number.isInteger ||
    function (value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
export function isArray(val) {
    return !!(Array.isArray(val) || isObservableArray(val));
}
export function asArray(val) {
    if (!val)
        return EMPTY_ARRAY;
    if (isArray(val))
        return val;
    return [val];
}
export function extend(a) {
    var b = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        b[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < b.length; i++) {
        var current = b[i];
        for (var key in current)
            a[key] = current[key];
    }
    return a;
}
export function extendKeepGetter(a) {
    var b = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        b[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < b.length; i++) {
        var current = b[i];
        for (var key in current) {
            var descriptor = Object.getOwnPropertyDescriptor(current, key);
            if ("get" in descriptor) {
                Object.defineProperty(a, key, tslib_1.__assign({}, descriptor, { configurable: true }));
                continue;
            }
            a[key] = current[key];
        }
    }
    return a;
}
export function isPlainObject(value) {
    if (value === null || typeof value !== "object")
        return false;
    var proto = Object.getPrototypeOf(value);
    return proto === Object.prototype || proto === null;
}
export function isMutable(value) {
    return (value !== null &&
        typeof value === "object" &&
        !(value instanceof Date) &&
        !(value instanceof RegExp));
}
export function isPrimitive(value) {
    if (value === null || value === undefined)
        return true;
    if (typeof value === "string" ||
        typeof value === "number" ||
        typeof value === "boolean" ||
        value instanceof Date)
        return true;
    return false;
}
/*
 * Freeze a value and return it (if not in production)
 */
export function freeze(value) {
    if (process.env.NODE_ENV === "production")
        return value;
    return isPrimitive(value) || isObservableArray(value) ? value : Object.freeze(value);
}
/*
 * Recursively freeze a value (if not in production)
 */
export function deepFreeze(value) {
    if (process.env.NODE_ENV === "production")
        return value;
    freeze(value);
    if (isPlainObject(value)) {
        Object.keys(value).forEach(function (propKey) {
            if (!isPrimitive(value[propKey]) &&
                !Object.isFrozen(value[propKey])) {
                deepFreeze(value[propKey]);
            }
        });
    }
    return value;
}
export function isSerializable(value) {
    return typeof value !== "function";
}
export function addHiddenFinalProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: false,
        configurable: true,
        value: value
    });
}
export function addHiddenWritableProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: false,
        writable: true,
        configurable: true,
        value: value
    });
}
export function addReadOnlyProp(object, propName, value) {
    Object.defineProperty(object, propName, {
        enumerable: true,
        writable: false,
        configurable: true,
        value: value
    });
}
export function remove(collection, item) {
    var idx = collection.indexOf(item);
    if (idx !== -1)
        collection.splice(idx, 1);
}
export function registerEventHandler(handlers, handler) {
    handlers.push(handler);
    return function () {
        remove(handlers, handler);
    };
}
var prototypeHasOwnProperty = Object.prototype.hasOwnProperty;
export function hasOwnProperty(object, propName) {
    return prototypeHasOwnProperty.call(object, propName);
}
export function argsToArray(args) {
    var res = new Array(args.length);
    for (var i = 0; i < args.length; i++)
        res[i] = args[i];
    return res;
}
export function invalidateComputed(target, propName) {
    var atom = getAtom(target, propName);
    atom.trackAndCompute();
}
var deprecated = function () { };
deprecated = function (id, message) {
    // skip if running production
    if (process.env.NODE_ENV === "production")
        return;
    // warn if hasn't been warned before
    if (deprecated.ids && !deprecated.ids.hasOwnProperty(id)) {
        console.warn("[mobx-state-tree] Deprecation warning: " + message);
    }
    // mark as warned to avoid duplicate warn message
    if (deprecated.ids)
        deprecated.ids[id] = true;
};
deprecated.ids = {};
export { deprecated };
//# sourceMappingURL=utils.js.map